) +
theme(
axis.line.x.bottom = element_line(size = .3, color = "black"),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_line(linetype = "dashed"),
)
# plotting accuracy (hist)
ggplot(dat_long, aes(x = acc)) +
geom_histogram(binwidth = 1,
fill = "white",
colour = "black") +
scale_y_continuous(
name = "Accuracy (0-100)",
limits = c(0, 18),
expand = (c(0, 0))
) +
theme_minimal_hgrid(
font_size = 11,
line_size = .3
) +
theme(
axis.line.x.bottom = element_line(size = .3, color = "black"),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_line(linetype = "dashed"),
)
# density plot
p5 <- ggplot(dat_long, aes(x = rt, fill = condition)) +
geom_density() +
scale_y_continuous(
name = "Reaction time (ms)",
expand = c(0, 0)
) +
scale_fill_discrete(
name = "Condition",
labels = c("Word", "Non-word")
) +
theme_minimal_hgrid(
font_size = 11,
line_size = .3
) +
theme(
axis.line.x.bottom = element_line(size = .3, color = "black"),
axis.ticks.x = element_line(color = "black"),
axis.ticks.y = element_blank(),
panel.grid = element_line(linetype = "dashed"),
)
# scatterplot
ggplot(dat_long, aes(x = rt, y = age, color = condition)) +
geom_point() +
geom_smooth(method = "lm") +
scale_colour_discrete(
name = "Condition",
labels = c("Word", "Non-word")
) +
theme_cowplot() +
theme(
axis.line = element_line(size = .3)
)
# plotting relation between rt and condition (using wide-form data)
p4 <- ggplot(dat, aes(x = rt_word, y = rt_nonword, color = language)) +
geom_point() +
geom_smooth(method = "lm") +
scale_colour_viridis_d(
name = "Condition",
labels = c("Monolingual", "Bilingual"),
option = "E"
) +
theme_cowplot() +
theme(
axis.line = element_line(size = .3)
)
# boxplot
ggplot(dat_long, aes(x = condition, y = acc, fill = language)) +
geom_boxplot() +
scale_fill_viridis_d(
option = "E",
name = "Group",
labels = c("Bilingual", "Monolingual")
) +
scale_x_discrete(
name = "Condition",
labels = c("Word", "Non-word")
) +
scale_y_continuous(
name = "Accuracy"
) +
theme_cowplot() +
theme(
axis.line = element_line(size = .3)
)
# violin plot
ggplot(dat_long, aes(x = condition, y = acc, fill = language)) +
geom_violin() +
scale_fill_viridis_d(
option = "D",
name = "Group",
labels = c("Bilingual", "Monolingual")
) +
scale_x_discrete(
name = "Condition",
labels = c("Word", "Non-word")
) +
scale_y_continuous(
name = "Accuracy"
) +
theme_cowplot() +
theme(
axis.line = element_line(size = .3)
)
# bar chart of means
ggplot(dat_long, aes(x = condition, y = rt)) +
stat_summary(fun = "mean", geom = "bar", fill = "blue") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_y_continuous(
expand = c(0, 0)
) +
theme_minimal_hgrid(
font_size = 11,
line_size = .3
) +
theme(
axis.line.x.bottom = element_line(size = .3, color = "black"),
axis.ticks = element_blank(),
panel.grid = element_line(linetype = "dashed")
)
# grouped violin-boxplot
ggplot(dat_long, aes(x = condition, y = rt, fill = language)) +
geom_violin(
alpha = .4
) +
geom_boxplot(
width = .2,
fatten = NULL,
position = position_dodge(.9),
alpha = .4
) +
stat_summary(fun = "mean", geom = "point", position = position_dodge(.9)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1, position = position_dodge(.9)) +
scale_y_continuous(
expand = c(0, 0)
) +
scale_fill_viridis_d(
option = "E"
) +
theme_minimal_hgrid(
font_size = 11,
line_size = .3
) +
theme(
axis.line.x.bottom = element_line(size = .3, color = "black"),
axis.ticks = element_blank(),
panel.grid = element_line(linetype = "dashed")
)
# interaction plot
ggplot(dat_long, aes(x = condition, y = rt, shape = language, group = language, color = language)) +
stat_summary(fun = "mean", geom = "point", size = 3) +
stat_summary(fun = "mean", geom = "line") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2) +
scale_color_manual(
values = c("blue", "darkorange")
) +
theme_cowplot() +
theme(
axis.line = element_line(size = .3)
)
# combined interaction plot
p3 <- ggplot(dat_long, aes(x = condition, y = rt, shape = language, group = language)) +
geom_point(aes(color = language), alpha = .2) +
geom_line(aes(group = id, color = language), alpha = .2) +
stat_summary(fun = "mean", geom = "point", size = 2, color = "black") +
stat_summary(fun = "mean", geom = "line", color = "black") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .2, color = "black") +
theme_cowplot() +
theme(
axis.line = element_line(size = .3)
)
# scatterplots
p1 <- ggplot(dat_long, aes(x = rt, y = age, color = condition)) +
geom_point() +
geom_smooth(method = "lm") +
scale_colour_discrete(
name = "Condition",
labels = c("Word", "Non-word")
) +
theme_cowplot() +
theme(
axis.line = element_line(size = .3)
) +
facet_wrap(~condition)
# grouped violin-boxplot
p2 <- ggplot(dat_long, aes(x = condition, y = rt, fill = language)) +
geom_violin(
alpha = .4
) +
geom_boxplot(
width = .2,
fatten = NULL,
position = position_dodge(.9),
alpha = .4
) +
stat_summary(fun = "mean", geom = "point", position = position_dodge(.9)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1, position = position_dodge(.9)) +
scale_y_continuous(
expand = c(0, 0)
) +
scale_fill_viridis_d(
option = "E"
) +
theme_minimal_hgrid(
font_size = 11,
line_size = .3
) +
theme(
axis.line.x.bottom = element_line(size = .3, color = "black"),
axis.ticks = element_blank(),
panel.grid = element_line(linetype = "dashed")
) +
facet_wrap(~factor(language,
levels = c("monolingual", "bilingual"),
labels = c("Monolingual participants", "Bilingual participants")
)) +
guides(fill = FALSE) # remove legend
p2
# saving plots as images
# ggsave(filename = "grouped_violin_plots.png", plot = p1)
# arranging multiple plots
p1 + p2 # side-by-side
p1 / p2 # stacked
(p3 | p4) / p1 + p3 # multiple plots
# labeling axis with labs()
p3 + labs(
x = "Type of word",
y = "Reaction time (ms)",
title = "Language group by word type interaction plot",
subtitle = "Reaction time data"
)
theme_hgrid_config <- theme_minimal_hgrid(
font_size = 11,
line_size = .3
) +
theme(
axis.line.x.bottom = element_line(size = .3, color = "black"),
axis.ticks = element_blank(),
panel.grid = element_line(linetype = "dashed"))
# split-violin plots
ggplot(dat_long, aes(x = condition, y = rt, fill = language)) +
introdataviz::geom_split_violin(alpha = .4, trim = FALSE) +
geom_boxplot(width = .2, alpha = .6, show.legend = FALSE) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
scale_x_discrete(name = "Condition", labels = c("Non-word", "Word")) +
scale_y_continuous(name = "Reaction time (ms)",
breaks = seq(200, 800, 100),
limits = c(200, 800),
expand = c(0, 0)) +
scale_fill_viridis_d(option = "E", name = "Language group") +
theme_hgrid_config
## By default, show code for all chunks in the knitted document,
## as well as the output. To override for a particular chunk
## use echo = FALSE in its options.
knitr::opts_chunk$set(
echo=TRUE, message=FALSE, warning=FALSE
)
# CONFIG
user_name <- "fernandomillanvillalobos" # your Git username (only needed if
# you want to deploy to GH pages)
project_name <- "datavizR" # adapt!
package_date <- "2021-06-01" # date of the CRAN snapshot that
# the checkpoint package uses
r_version <- "4.1.2" # R-Version to use
options(Ncpus = 4) # use 4 cores for parallelized installation of packages
if (r_version != paste0(version$major, ".", version$minor)) {
stop("ERROR: specified R version does not match currently used.")
}
detach_all_packages <- function() {
basic_packages_blank <-  c("stats",
"graphics",
"grDevices",
"utils",
"datasets",
"methods",
"base")
basic_packages <- paste("package:", basic_packages_blank, sep = "")
package_list <- search()[
ifelse(unlist(gregexpr("package:", search())) == 1, TRUE, FALSE)]
package_list <- setdiff(package_list, basic_packages)
if (length(package_list) > 0)  for (package in package_list) {
detach(package, character.only = TRUE, unload = TRUE)
print(paste("package ", package, " detached", sep = ""))
}
}
detach_all_packages()
# this allows multiple persons to use the same RMarkdown
# without adjusting the working directory by themselves all the time
source("scripts/csf.R")
path_to_wd <- csf() # if this - for some reason - does not work,
# replace with a hardcoded path, like so: "~/projects/rddj-template/analysis/"
if (is.null(path_to_wd) | !dir.exists(path_to_wd)) {
print("WARNING: No working directory specified for current user")
} else {
setwd(path_to_wd)
}
# suppress scientific notation
options(scipen = 999)
# suppress summarise info
options(dplyr.summarise.inform = FALSE)
# unload global rstudioapi and knitr again to avoid conflicts with checkpoint
# this is only necessary if executed within RStudio
# outside of RStudio, namely in the knit.sh script, this causes RMarkdown
# rendering to fail, thus should not be executed there
if (Sys.getenv("RSTUDIO") == "1") {
detach_all_packages()
}
# from https://mran.revolutionanalytics.com/web/packages/\
# checkpoint/vignettes/using-checkpoint-with-knitr.html
# if you don't need a package, remove it from here (commenting not sufficient)
# tidyverse: see https://blog.rstudio.org/2016/09/15/tidyverse-1-0-0/
cat("
library(rstudioapi)
library(tidyverse)
library(scales)
library(lintr)
library(rmarkdown)
library(cowplot)
library(extrafont)
library(sf)
library(ggrepel)
library(gapminder)
library(socviz)
library(RColorBrewer)
library(ggforce)
library(dichromat)
library(ggridges)
library(viridis)
library(palmerpenguins)
library(lubridate)
library(ggforce)
library(ggthemes)
library(nycflights13)
library(broom)
library(glue)
library(ggiraph)
library(hexbin)
library(patchwork)
library(distributional)
library(psych)
library(ggalluvial)
library(ggdist)
library(ds4psy)
library(unikn)
library(ISLR)
library(MASS)
library(introdataviz)
library(gganimate)",
file = "manifest.R")
# if checkpoint is not yet installed, install it (for people using this
# system for the first time)
if (!require(checkpoint)) {
if (!require(devtools)) {
install.packages("devtools", repos = "http://cran.us.r-project.org")
require(devtools)
}
devtools::install_github("RevolutionAnalytics/checkpoint",
ref = "v0.3.2", # could be adapted later,
# as of now (beginning of July 2017
# this is the current release on CRAN)
repos = "http://cran.us.r-project.org")
require(checkpoint)
}
# nolint start
if (!dir.exists("~/.checkpoint")) {
dir.create("~/.checkpoint")
}
# nolint end
# install packages for the specified CRAN snapshot date
checkpoint(snapshot_date = package_date,
project = path_to_wd,
verbose = T,
scanForPackages = T,
use.knitr = F,
R.version = r_version)
rm(package_date)
source("manifest.R")
## By default, show code for all chunks in the knitted document,
## as well as the output. To override for a particular chunk
## use echo = FALSE in its options.
knitr::opts_chunk$set(
echo=TRUE, message=FALSE, warning=FALSE
)
# CONFIG
user_name <- "fernandomillanvillalobos" # your Git username (only needed if
# you want to deploy to GH pages)
project_name <- "datavizR" # adapt!
package_date <- "2021-06-01" # date of the CRAN snapshot that
# the checkpoint package uses
r_version <- "4.1.2" # R-Version to use
options(Ncpus = 4) # use 4 cores for parallelized installation of packages
if (r_version != paste0(version$major, ".", version$minor)) {
stop("ERROR: specified R version does not match currently used.")
}
detach_all_packages <- function() {
basic_packages_blank <-  c("stats",
"graphics",
"grDevices",
"utils",
"datasets",
"methods",
"base")
basic_packages <- paste("package:", basic_packages_blank, sep = "")
package_list <- search()[
ifelse(unlist(gregexpr("package:", search())) == 1, TRUE, FALSE)]
package_list <- setdiff(package_list, basic_packages)
if (length(package_list) > 0)  for (package in package_list) {
detach(package, character.only = TRUE, unload = TRUE)
print(paste("package ", package, " detached", sep = ""))
}
}
detach_all_packages()
# this allows multiple persons to use the same RMarkdown
# without adjusting the working directory by themselves all the time
source("scripts/csf.R")
path_to_wd <- csf() # if this - for some reason - does not work,
# replace with a hardcoded path, like so: "~/projects/rddj-template/analysis/"
if (is.null(path_to_wd) | !dir.exists(path_to_wd)) {
print("WARNING: No working directory specified for current user")
} else {
setwd(path_to_wd)
}
# suppress scientific notation
options(scipen = 999)
# suppress summarise info
options(dplyr.summarise.inform = FALSE)
# unload global rstudioapi and knitr again to avoid conflicts with checkpoint
# this is only necessary if executed within RStudio
# outside of RStudio, namely in the knit.sh script, this causes RMarkdown
# rendering to fail, thus should not be executed there
if (Sys.getenv("RSTUDIO") == "1") {
detach_all_packages()
}
# from https://mran.revolutionanalytics.com/web/packages/\
# checkpoint/vignettes/using-checkpoint-with-knitr.html
# if you don't need a package, remove it from here (commenting not sufficient)
# tidyverse: see https://blog.rstudio.org/2016/09/15/tidyverse-1-0-0/
cat("
library(rstudioapi)
library(tidyverse)
library(scales)
library(lintr)
library(rmarkdown)
library(cowplot)
library(extrafont)
library(sf)
library(ggrepel)
library(gapminder)
library(socviz)
library(RColorBrewer)
library(ggforce)
library(dichromat)
library(ggridges)
library(viridis)
library(palmerpenguins)
library(lubridate)
library(ggforce)
library(ggthemes)
library(nycflights13)
library(broom)
library(glue)
library(ggiraph)
library(hexbin)
library(patchwork)
library(distributional)
library(psych)
library(ggalluvial)
library(ggdist)
library(ds4psy)
library(unikn)
library(ISLR)
library(MASS)
library(introdataviz)
library(gganimate)",
file = "manifest.R")
# if checkpoint is not yet installed, install it (for people using this
# system for the first time)
if (!require(checkpoint)) {
if (!require(devtools)) {
install.packages("devtools", repos = "http://cran.us.r-project.org")
require(devtools)
}
devtools::install_github("RevolutionAnalytics/checkpoint",
ref = "v0.3.2", # could be adapted later,
# as of now (beginning of July 2017
# this is the current release on CRAN)
repos = "http://cran.us.r-project.org")
require(checkpoint)
}
# nolint start
if (!dir.exists("~/.checkpoint")) {
dir.create("~/.checkpoint")
}
# nolint end
# install packages for the specified CRAN snapshot date
checkpoint(snapshot_date = package_date,
project = path_to_wd,
verbose = T,
scanForPackages = T,
use.knitr = F,
R.version = r_version)
rm(package_date)
source("manifest.R")
devtools::install_github("psyteachr/introdataviz")
